/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

console.time('FIBEVEN');
let bigInt = require("big-integer");
//const { sumArr } = require('../utils/math_utils'); // se va a quedar como suma normal

let max = bigInt(4000);
let arrFib = [];

const fibonacci = (n, fn) => {
    const sol = [0,1]; // base case

    for(let i = 2; i <= n; i++){
        sol[i] = sol[i-1] + sol[i-2]; // dynamically growing the array
        console.log(sol[i], n);
        fn(sol[i]);
    }
    return sol[n];
}

//console.log(fibonacci(10, (n) => { console.log(n%2) }));
//let sumF = fibonacci(10, (n) => { arrFib.push(n) });
let sumF = fibonacci(max, (n) => { if(n%2 == 0 && n < max){ arrFib.push(bigInt(n))} });
//let sumF = fibonacci(10, (n) => true); // do nothing
//console.log(sumF, arrFib, arrFib.reduce(function(x,y){return bigInt(x).plus(y)}));
console.log(sumF, arrFib);
console.timeEnd('FIBEVEN');